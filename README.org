#+TITLE: OnlineTA Web Server

Nothing special, just a multiplexer. The fun stuff happens later.

Starts a Go server at port =8080=, and writes an error log to =error.log=.

The web server is _completely serial_. Maybe this is a feature?

** How-To

Create the directories =uploads= and =tests=. Place tests for a numerically
indexed assignment under =tests=. The entry program must be called =run.sh=,
and must be executable. For instance, [[tests/0/run.sh][=tests/0/run.sh=]].

The server will upload the files given in one request to a temporary directory
under =./uploads= and call the relevant =./tests/<id>/run.sh= for a request
made to =localhost:8080/grade/<id>=. The temporary directory is purged
subsequently.

To configure which form variables are to be named what in the resulting
directory, and for controling which files *must* be there, see
[[files.json][=files.json=]]. You can also just check this at a later stage,
somewhere under your =run.sh=.

* Testing

Go ahead and run it in one terminal:

#+BEGIN_SRC shell
go run main.go
#+END_SRC

And curl it in another:

#+BEGIN_SRC shell
curl -F src=@src.zip -F report=@report.pdf -F group=@group.txt http://localhost:8080/grade/0
#+END_SRC

* Deploying

#+BEGIN_SRC shell
./build.sh # Builds a statically-linked executable.
./deploy.sh # scp's to whatever host you specified in deploy.conf
#+END_SRC
